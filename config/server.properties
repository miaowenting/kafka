# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.

# 每一个Broker在集群中的唯一标识。 即使Broker的IP地址发生了变化，broker.id只要没变，则不会影响consumers的消息情况
#
broker.id=0

# 是否允许Topic被删除。如果是false,使用管理员工具删除Topic的时候，Kafka并不会处理此操作
delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
# 接收请求的线程数
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
# 执行请求的线程数
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
# 在介绍下面两个缓冲区设置之前，先来介绍- .下相关背 景知识:
# 每个TCP socket在内核中都有一个发送缓冲区( so SNDBUE )和一个接收缓冲区
# (SO_ RCVBUF)。接收缓冲区把数据缓存人内核，应用进程直没有 调用read进行读取的话，
# 此数据会- .直缓存 在相应socket的接收缓冲区内。再哕嗦点，不管进程 是否读取socket,
# 对端发来的数据都会经由内核接收并且缓存到socket的内核接收缓冲区之中。read所做的
# 工作，就是把内核缓冲区中的数据复制到应用层用户的buffer里面，仅此而已。进程调用
# send发送的数据的时候，般情况下， 将数据复制进人socket 的内核发送缓冲区之中，然
# 后send便会在上层返回。换句话说，send返回之时，数据不一定会发送到对端去，send
# 仅仅是把应用层buffer的数据复制进socket的内核发送buffer中
# TCP连接的SO_ SNDBUF 缓冲区大小，默认102400,单位是字节
# 如果是-1，就使用操作系统的默认值
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
# TCP连接的so RCVBUF缓冲区大小，默认102400,单位是字节
# 如果是一1,就使用操作系统的默认值
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
# 请求的最大长度
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
# 用于存储log文件的目录，可以将多个目录通过逗号分隔，形成一个目录列表
log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
# 每个topic默认的分区数，默认为1
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
# 用来恢复log文件以及关闭时将log数据刷新到磁盘的线程数量，每个目录对应
# num.recovery. threads.per.data.dir个线程
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
# 每隔多少个消息触发次flush操作，将内存中的消息刷新到硬盘上
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
# 每隔多少毫秒触发一次 flush操作，将内存中的消息刷新到硬盘上
#log.flush.interval.ms=1000

#上面这两个配置是 全局的，可以在Topic 中重新设置，并覆盖这两 个配置

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age

# 注意:下面有两种配置，一种是基于时间的策略，另种是基于日志文件大小的策略，两种
# 策略同是配置的话， 只要满足其中一种策略，则触发Log删除的操作。 删除操作总是先删除
# 最旧的日志
# 消息在 Kafka中保存的时间，168小时之前的log,可以被删除掉
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
# 当剩余空间低于log.retention.bytes字节，则开始删除log
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
# segment 日志文件大小的上限值。当超过这个值时，会创建新的segment日志文件
# segment文件的相关信息在后面介绍
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
# 每隔300000ms, logcleaner线程将检查次， 看是否符合上述保留策略的消息可以被删除
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
# Kafka依赖的ZooKeeper集群地址，可以配置多个ZooKeeper地址，使用逗号隔开
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
# zk的超时时间
zookeeper.connection.timeout.ms=6000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0